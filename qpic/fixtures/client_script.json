[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2022-11-09 13:50:26.859388",
  "module": null,
  "name": "Employee-Form",
  "script": "frappe.ui.form.on('Employee', {\n      fetch_child_tables(frm){\n        frm.clear_table('education');\n        frappe.model.with_doc('Job Applicant', frm.doc.job_applicant, function () {\n        let source_doc = frappe.model.get_doc('Job Applicant', frm.doc.job_applicant);\n        $.each(source_doc.education, function (index, source_row) {\n            const target_row = frm.add_child('education');\n            target_row.course = source_row.course;\n            target_row.school_univ = source_row.school_univ;\n            target_row.qualification = source_row.qualification;\n            target_row.level = source_row.level;\n            target_row.year_of_passing = source_row.year_of_passing;\n            target_row.class_per = source_row.class_per;\n            target_row.maj_opt_subj = source_row.maj_opt_subj;\n            frm.refresh_field('education');\n        });\n    });\n\t   \n    \n\t   frm.clear_table('external_work_history');\n    frappe.model.with_doc('Job Applicant', frm.doc.job_applicant, function () {\n        let source_doc = frappe.model.get_doc('Job Applicant', frm.doc.job_applicant);\n        $.each(source_doc.external_work_history, function (index, source_row) {\n            const target_row = frm.add_child('external_work_history');\n            target_row.company_name = source_row.company_name;\n            target_row.designation = source_row.designation;\n            target_row.salary = source_row.salary;\n            target_row.fixed = source_row.fixed_salary;\n            target_row.variable = source_row.variables;\n            target_row.address = source_row.address;\n            target_row.contact = source_row.contact;\n            target_row.reason_of_change = source_row.reason_of_change;\n            target_row.from = source_row.from;\n            target_row.to = source_row.to;\n            frm.refresh_field('external_work_history');\n        });\n    }); \n    },\n\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\tbasic(frm){\n\t    frm.trigger(\"gross_salary_calc\");\n\t},\n\thra(frm){\n\t    frm.trigger(\"gross_salary_calc\");\n\t},\n\tother_allowance(frm){\n\t    frm.trigger(\"gross_salary_calc\");\n\t},\n\tmobile_allowance(frm){\n\t    frm.trigger(\"gross_salary_calc\");\n\t},\n\ttransportation(frm){\n\t    frm.trigger(\"gross_salary_calc\");\n\t},\n\tvalidate(frm){\n\t    frm.trigger(\"gross_salary_calc\");\n\t},\n\t job_applicant(frm){\n        frm.trigger(\"fetch_child_tables\")\n    },\n    joining_form(frm){\n        frm.trigger(\"fetch_child_tables\")\n    },\n\tgross_salary_calc(frm){\n\t    var gross_pay = frm.doc.basic + frm.doc.hra + frm.doc.other_allowance + frm.doc.mobile_allowance + frm.doc.transportation;\n\t    frm.set_value(\"gross_salary\",gross_pay);\n\t},\n\tdate_of_joining:function(frm){\n    \t frm.trigger(\"doj_calculation\")\n\t},\n\tdate_of_birth:function(frm){\n    \t frm.trigger(\"age_calculation\")\n\t},\n\tage_calculation:function(frm){\n\t     var dob = frm.doc.date_of_birth;  \n    \t var birthDate = new Date(dob);\n    \t var difference=Date.now() - birthDate.getTime(); \n    \t var  ageDate = new Date(difference); \n    \t var calculatedAge = Math.abs(ageDate.getUTCFullYear() - 1970);\n    \t frm.set_value(\"age\",calculatedAge)\n    \t if (calculatedAge < 18){\n    \t     frappe.msgprint(\"Employee lesser than age 18 will not be allowed\")\n    \t     frappe.validated = false;\n    \t }\n    \t \n    },\n    doj_calculation:function(frm){\n\t\tif(frm.doc.grade == \"Factory Staff\" || frm.doc.grade == \"Office Staff\"){\n            var date = frm.doc.date_of_joining\n            var prob = frappe.datetime.add_days(date, 91)\n            frm.set_value('probation_end_date',prob)\n            frm.set_value('employment_type','Probation')\n        }\n        if(frm.doc.grade == \"Labour\"){\n            var date = frm.doc.date_of_joining\n            var prob = frappe.datetime.add_days(date, 181)\n            frm.set_value('probation_end_date',prob)\n            frm.set_value('employment_type','Probation')\n        }\n\n    },\n    validate(frm){\n        var pattern =/^[0-9]{11}$/;\n        var id_no = frm.doc.resident_id_number;\n        if (pattern.test(id_no)){\n            frappe.validated = true;\n        }\n        else\n        \n        {\n        frappe.msgprint(\" Resident Id Number must contain 11 Integers\");\n         frappe.validated = false;\n\n         }  \n        //   frm.set_value('session_user',frappe.session.user)\n        //   if(frm.doc.designation){\n        //       frm.set_value(\"date_of_change\",new Date())\n        //   }\n        // if (frm.doc.employment_type == 'Full-time'){ \n        //       frappe.call({\n        //           method:'qpic.custom.validate_employment_type',\n        //           args:{\n        //               'employee':frm.doc.employee\n        //           },\n        //           callback:function (r){\n        //               console.log(r)\n        //               if (r.message == 'No'){\n        //                   frappe.msgprint(\"Submit Probation Evaluation form\")\n        //                   frappe.validated = false\n        //               }\n        //           }\n        //       })\n        //   }\n          \n      }\n      \n    \t\n    \n\t \n\t    \n    \n\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leave Rejoining Form",
  "enabled": 1,
  "modified": "2022-11-10 09:19:30.393939",
  "module": null,
  "name": "Re Joining Form from Leave-Form",
  "script": "frappe.ui.form.on('Leave Rejoining Form', {\n\trefresh(frm) {\n        \n\t},\n// \temp_no(frm){\n//         console.log(frm.doc.emp_no);\n// \t},\n\tend(frm){ \n\t\t    frm.trigger(\"total_leave_in_days\")\n\t},\n\tstart(frm){\n\t      frm.trigger(\"date_validation\")\n    },\n\tend(frm){\n\t      frm.trigger(\"date_validate\")\n\t},\n\tdate_validate:function(frm){\n\t    if(frm.doc.end < frm.doc.start){\n\t        frappe.msgprint(__(\"End date cannot be less than Start Date\"));\n\t\t\tfrappe.validated = false;\n\t    }\n\t},\n\tdate_validation:function(frm){\n\t    if(frm.doc.end < frm.doc.start){\n\t        frappe.msgprint(__(\"Start date cannot be greater than End Date\"));\n\t\t\tfrappe.validated = false;\n\t    }\n\t},\n\treporting_date(frm){\n\t      frm.trigger(\"report_validation\")\n\t},\n\tre_join(frm){\n\t      frm.trigger(\"rejoin_validation\")\n\t},\n\treport_validation:function(frm){\n\t    if(frm.doc.re_join < frm.doc.reporting_date){\n\t        frappe.msgprint(__(\"Reporting date cannot be greater than Re-Join Date\"));\n\t\t\tfrappe.validated = false;\n\t    }\n\t},\n\trejoin_validation:function(frm){\n\t    if(frm.doc.re_join < frm.doc.reporting_date){\n\t        frappe.msgprint(__(\"Re-Join date cannot be lesser than Reporting Date\"));\n\t\t\tfrappe.validated = false;\n\t    }\n\t},\n\ttotal_leave_in_days:function(frm){\n\t     if(frm.doc.start && frm.doc.end){\n\t         var end = frappe.datetime.obj_to_str(frm.doc.end);\n\t         var start = frappe.datetime.obj_to_str(frm.doc.start);\n\t         var datediff = frappe.datetime.get_day_diff(end,start);\n\t         frm.set_value(\"total_leave_in_days\",datediff);\n\t     }\n\t},\n// \tre_join(frm){\n    // \t    frm.trigger(\"late_joining_days\")\n// \t},\n\treporting_date(frm){\n            frm.trigger(\"early_joining_days\")\n            frm.trigger(\"late_joining_days\")\n    },\n\t   // late_joining_in_days:function(frm){\n\t   // if(frm.doc.reporting_date && frm.doc.re_join){      \n\t   //     var rejoin = frappe.datetime.obj_to_str(frm.doc.re_join);\n\t   //     var report = frappe.datetime.obj_to_str(frm.doc.reporting_date);\n\t   //     var difference = frappe.datetime.get_day_diff(rejoin,report);\n\t   //     frm.set_value(\"late_joining_in_days\",difference);\n\t   // }\n\t   // },\n    early_joining_days:function(frm){\n\t    if(frm.doc.reporting_date && frm.doc.end){ \n    \t    var reporting_date = frm.doc.reporting_date\n            var end_date = frm.doc.end\n            var diff = frappe.datetime.get_day_diff(reporting_date,end_date);\n            console.log(diff)\n             if (diff < 0){\n                console.log(diff)\n                frm.set_value('early_joining_days',diff)\n            }\n            else{\n                frm.set_value('early_joining_days',0)\n            }\n            // frm.set_value('early_joining_days',diff)\n\t    }\n\t    },\n\t    late_joining_days:function(frm){\n\t    if(frm.doc.reporting_date && frm.doc.end){ \n    \t    var reporting_date = frm.doc.reporting_date\n            var end_date = frm.doc.end\n            var diff = frappe.datetime.get_day_diff(reporting_date,end_date);\n            if (diff > 0){\n                 console.log(diff)\n                frm.set_value('late_joining_in_days',diff)\n            }\n            else{\n                frm.set_value('late_joining_in_days',0)\n            }\n\t    }\n\t    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leave Application",
  "enabled": 1,
  "modified": "2022-11-17 11:44:39.562036",
  "module": null,
  "name": "Leave Application-Form",
  "script": "frappe.ui.form.on('Leave Application', {\n\trefresh(frm) {\n\t\tif (frm.doc.workflow_state == \"Approved\" && frm.doc.leave_type == 'Annual Leave' && frappe.user.has_role('HR User')) {\n\t\t\tfrm.add_custom_button(__('Leave Salary'), function () {\n\t\t\t\tfrappe.db.get_value('Leave Salary', { 'employee': frm.doc.employee }, 'name')\n\t\t\t\t\t.then(r => {\n\t\t\t\t\t\tif (r.message && Object.entries(r.message).length === 0) {\n\t\t\t\t\t\t\tconsole.log('hello');\n\t\t\t\t\t\t\tfrappe.route_options = { 'employee': frm.doc.employee, 'employee_name': frm.doc.employee_name };\n\t\t\t\t\t\t\tfrappe.set_route('Form', 'Leave Salary', 'new-leave-salary-1');\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tfrappe.set_route('Form', 'Leave Salary', r.message.name);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t},\n\treason(frm){\n\t\tfrm.set_value(\"description\",frm.doc.reason);\n\t},\n\tcustom_from_date(frm){\n\t\tfrm.set_value(\"from_date\",frm.doc.custom_from_date);\n\t},\n\tcustom_to_date(frm){\n\t\tfrm.set_value(\"to_date\",frm.doc.custom_to_date);\n\t},\n\ttotal_leave_days(frm){\n\t    frm.set_value(\"custom_total_leave_days\",frm.doc.total_leave_days);\n\t},\n    check_leave_availability(frm){\n\t    console.log('hi');\n\t    console.log(frm.doc.total_leave_days);\n\t    console.log(frm.doc.leave_balance);\n\t    if(frm.doc.total_leave_days > frm.doc.leave_balance){\n\t        console.log('hi');\n\t        var lop_days = frm.doc.total_leave_days - frm.doc.leave_balance;\n\t        frm.set_value(\"lop_days\",lop_days);\n\t        frappe.call({\n\t\t\t\tmethod: 'qpic.custom.get_to_date',\n\t\t\t\targs: {\n\t\t\t\t\tfrom_date: frm.doc.from_date,\n\t\t\t\t\ttotal_leave_days:frm.doc.leave_balance\n\t\t\t\t},\n\t\t\t\tcallback: function (r) {\n\t\t\t\t\tfrm.set_value(\"to_date\",r.message);\n\t\t\t\t}\n\t\t\t});\n\t    }\n\t},\n\ton_submit(frm) {\n\t\tif (frm.doc.workflow_state == \"Approved\") {\n\t\t\tfrm.set_value(\"status\", Approved);\n\t\t};\n\t},\n\tvalidate(frm) {\n\t    frm.trigger(\"check_leave_availability\");\n\t\tif (frm.doc.leave_type == 'Maternity Leave') {\n\t\t\tfrappe.call({\n\t\t\t\tmethod: 'qpic.custom.maternity_leave_calculation',\n\t\t\t\targs: {\n\t\t\t\t\temployee: frm.doc.employee\n\t\t\t\t},\n\t\t\t\tcallback: function (r) {\n\t\t\t\t\tconsole.log(r.message);\n\t\t\t\t\tif (r.message == 'Not Allowed') {\n\t\t\t\t\t\tfrappe.msgprint(__(r.message));\n\t\t\t\t\t\tfrappe.validated = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (frm.doc.leave_type == 'Annual Leave') {\n\t\t\tfrappe.call({\n\t\t\t\tmethod: 'qpic.custom.annual_leave_calculation',\n\t\t\t\targs: {\n\t\t\t\t\temployee: frm.doc.employee\n\t\t\t\t},\n\t\t\t\tcallback: function (r) {\n\t\t\t\t\tconsole.log(r.message);\n\t\t\t\t\tif (r.message == 'Not Allowed') {\n\t\t\t\t\t\tfrappe.msgprint(__(\"Not Eligible. Min 1 Yr Service Reqd.\"));\n\t\t\t\t\t\tfrappe.validated = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (frm.doc.leave_type == 'Pilgrimage Leave') {\n\t\t\tfrappe.call({\n\t\t\t\tmethod: 'qpic.custom.pilgrimage_leave',\n\t\t\t\targs: {\n\t\t\t\t\temployee: frm.doc.employee\n\t\t\t\t},\n\t\t\t\tcallback: function (r) {\n\t\t\t\t\tif (r.message == 'Not Allowed') {\n\t\t\t\t\t\tfrappe.msgprint(__(r.message));\n\t\t\t\t\t\tfrappe.validated = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t},\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2022-08-20 12:32:55.780962",
  "module": null,
  "name": "Sales Order-Form",
  "script": "frappe.ui.form.on('Sales Order', {\r\n    refresh(frm){\r\n\t    frm.add_custom_button(__(\"Print\"), function () {\r\n\t\t\tvar f_name = frm.doc.name\r\n\t\t\tvar print_format = \"Sales Order\";\r\n\t\t\twindow.open(frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\r\n\t\t\t\t+ \"doctype=\" + encodeURIComponent(\"Sales Order\")\r\n\t\t\t\t+ \"&name=\" + encodeURIComponent(f_name)\r\n\t\t\t\t+ \"&trigger_print=1\"\r\n\t\t\t\t+ \"&format=\" + print_format\r\n\t\t\t\t+ \"&no_letterhead=0\"\r\n\t\t\t\t\r\n\t\t\t));\r\n\r\n\r\n\t\t});\r\n\t    \r\n\t},\r\n\tprepared_by(frm) {\r\n\t    console.log('hi');\r\n \t\t frappe.db.get_doc('Employee',null, {'user_id':frm.doc.prepared_by})\r\n \t\t\t.then(doc => {\r\n \t\t\t    \r\n\t\t\t  frm.set_value('prepared_by_username_',doc.employee_name)\r\n\t\t\t  frm.set_value('prepared_by_designation',doc.designation)\r\n\t\t\t  frm.set_value('prepared_by_mobile_number',doc.cell_number)\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tconsole.log(doc);\r\n \t\t\t})\r\n},\r\n\tsales_person_user(frm) {\r\n\t   console.log('hi');\r\n \t\t frappe.db.get_doc('Employee',null, {'user_id':frm.doc.prepared_by})\r\n \t\t\t.then(doc => {\r\n \t\t\t    \r\n\t\t\t  frm.set_value('sales_person_username_',doc.employee_name)\r\n\t\t\t  frm.set_value('sales_person_designation',doc.designation)\r\n\t\t\t  frm.set_value('sales_person_mobile_',doc.cell_number)\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tconsole.log(doc);\r\n \t\t\t})\r\n\t},\r\n\r\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2022-07-14 12:53:31.854469",
  "module": null,
  "name": "Sales Invoice-Form",
  "script": "frappe.ui.form.on('Sales Invoice', {\n\t\n\t\t// your code here\n\t\tprepared_by(frm) {\n\t    console.log('hi');\n \t\t frappe.db.get_doc('Employee',null, {'user_id':frm.doc.prepared_by})\n \t\t\t.then(doc => {\n \t\t\t    \n\t\t\t  frm.set_value('prepared_by_username_',doc.employee_name)\n\t\t\t  frm.set_value('prepared_by_designation',doc.designation)\n\t\t\t  frm.set_value('prepared_by_mobile_number',doc.cell_number)\n\t\t\t\n\t\t\t\n\t\t\tconsole.log(doc);\n \t\t\t})\n},\n\tsales_person_user(frm) {\n\t   console.log('hi');\n \t\t frappe.db.get_doc('Employee',null, {'user_id':frm.doc.prepared_by})\n \t\t\t.then(doc => {\n \t\t\t    \n\t\t\t  frm.set_value('sales_person_username_',doc.employee_name)\n\t\t\t  frm.set_value('sales_person_designation',doc.designation)\n\t\t\t  frm.set_value('sales_person_mobile_',doc.cell_number)\n\t\t\t\n\t\t\t\n\t\t\tconsole.log(doc);\n \t\t\t})\n\t}\n\n\t\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Note",
  "enabled": 1,
  "modified": "2022-07-14 12:56:41.443536",
  "module": null,
  "name": "Delivery Note-Form",
  "script": "frappe.ui.form.on('Delivery Note', {\n\n\t\t// your code here\n\t\t\tprepared_by(frm) {\n\t    console.log('hi');\n \t\t frappe.db.get_doc('Employee',null, {'user_id':frm.doc.prepared_by})\n \t\t\t.then(doc => {\n \t\t\t    \n\t\t\t  frm.set_value('prepared_by_username_',doc.employee_name)\n\t\t\t  frm.set_value('prepared_by_designation',doc.designation)\n\t\t\t  frm.set_value('prepared_by_mobile_number',doc.cell_number)\n\t\t\t\n\t\t\t\n\t\t\tconsole.log(doc);\n \t\t\t})\n},\n\tsales_person_user(frm) {\n\t   console.log('hi');\n \t\t frappe.db.get_doc('Employee',null, {'user_id':frm.doc.prepared_by})\n \t\t\t.then(doc => {\n \t\t\t    \n\t\t\t  frm.set_value('sales_person_username_',doc.employee_name)\n\t\t\t  frm.set_value('sales_person_designation',doc.designation)\n\t\t\t  frm.set_value('sales_person_mobile_',doc.cell_number)\n\t\t\t\n\t\t\t\n\t\t\tconsole.log(doc);\n \t\t\t})\n\t\n\n\t\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee Advance",
  "enabled": 1,
  "modified": "2022-07-29 16:27:00.996146",
  "module": null,
  "name": "Employee Advance-Form",
  "script": "frappe.ui.form.on('Employee Advance', {\n\tvalidate(frm){\n\t    if(frm.doc.advance_type == 'Salary Advance'){\n\t        frm.set_value('repay_unclaimed_amount_from_salary',1)\n\t    }\n\t    else{\n\t        frm.set_value('repay_unclaimed_amount_from_salary',0)\n\t    }\n\t    var emp_basic = frappe.db.get_value('Employee', frm.doc.employee, 'basic')\n\t    .then(r => {\n\t        var employee_advance = frm.doc.advance_amount \n\t        var basic_cal = r.message.basic/100*35\n\t        if(frm.doc.advance_type == 'Salary Advance'){\n\t            if(employee_advance <= basic_cal){\n\t            }\n\t            else{\n\t            frappe.throw(\"Not Allowed\")\n\t            }\n\t        }\n\t        if (frm.doc.advance_type == 'Salary Advance'){\n\t        frappe.call({\n\t            method:'qpic.custom.probation_emp',\n\t            args:{\n\t                employee : frm.doc.employee\n\t            },\n\t            callback:function(r){\n\t                console.log(r.message)\n\t                if (r.message == 'Not Allowed'){\n\t                    frappe.msgprint(__(r.message));\n\t                    frappe.validated = false\n\t                }\n\t            }\n\t        })\n\t    }\n\t    if (frm.doc.advance_type == 'Salary Advance'){\n\t       \n            \n\t        frappe.call({\n\t            method:'qpic.custom.get_month_for_advance_calc',\n\t            args:{\n\t                employee : frm.doc.employee\n\t            },\n\t            callback:function(r){\n\t                console.log(r.message)\n\t                \n\t                if (r.message == 'Not Allowed'){\n\t                    frappe.msgprint(__(r.message));\n\t                    frappe.validated = false\n\t                }\n\t            }\n\t        })\n\t    }\n        })\n        \n\t    \n\t \n\t        \n\t    \n\t},\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "HR Request",
  "enabled": 1,
  "modified": "2022-08-29 09:50:13.356085",
  "module": null,
  "name": "HR Request-Form",
  "script": "frappe.ui.form.on('HR Request', {\n\trefresh(frm) {\n    \t\tif(frm.doc.workflow_state == \"Approved\"){\n    \t\tif (frm.doc.hr_form_select == \"Salary Certificate\"){\n    \t\t frm.add_custom_button(__(\"Salary Certificate\"), function () {\n    \t\t\t\n    \t\t\tvar f_name = frm.doc.name\n    \t\t\tvar print_format = \"Salary Certificate\";\n    \t\t\twindow.open(frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\n    \t\t\t\t+ \"doctype=\" + encodeURIComponent(\"HR Request\")\n    \t\t\t\t+ \"&name=\" + encodeURIComponent(f_name)\n    \t\t\t\t+ \"&trigger_print=1\"\n    \t\t\t\t+ \"&format=\" + print_format\n    \t\t\t\t+ \"&no_letterhead=0\"\n    \t\t\t));\n\n\t\t    });   \n\t\t  \n    \t\t}\n    \t\t\n    \t\tif (frm.doc.hr_form_select == \"Letter to Bank\"){\n    \t\t frm.add_custom_button(__(\"Letter to Bank\"), function () {\n    \t\t\t\n    \t\t\tvar f_name = frm.doc.name\n    \t\t\tvar print_format = \"Bank Letter\";\n    \t\t\twindow.open(frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\n    \t\t\t\t+ \"doctype=\" + encodeURIComponent(\"HR Request\")\n    \t\t\t\t+ \"&name=\" + encodeURIComponent(f_name)\n    \t\t\t\t+ \"&trigger_print=1\"\n    \t\t\t\t+ \"&format=\" + print_format\n    \t\t\t\t+ \"&no_letterhead=0\"\n    \t\t\t));\n\t\t    });   \n\t\t  \n    \t\t}\n    \t\t\n\n\t\t}\n\t},\n\t\n\t\n\t\t\n\t\n// \t\tonload(frm){\n// \t    if(!frm.doc.table_34){\n// \t    frappe.call({\n// \t        method:'frappe.client.get_list',\n// \t        args:{\n// \t            'doctype':'Request Type'\n// \t        },\n// \t        callback(r){\n// \t            $.each(r.message,function(i,v){\n// \t                frm.add_child('hr_form',{\n// \t                    'request_type':v.name\n// \t                })\n// \t                frm.refresh_field('hr_form')\n// \t            })\n// \t        }\n// \t    })\n// \t}\n// \t}\n\t\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Loan Application",
  "enabled": 1,
  "modified": "2022-09-22 08:37:32.487664",
  "module": null,
  "name": "Loan Application-Form",
  "script": "frappe.ui.form.on('Loan Application', {\n    loan_amount(frm){\n        frm.trigger(\"loan_validation\")\n    },\n    \n    loan_validation(frm){\n        if(frm.doc.applicant_type == 'Employee' && frm.doc.applicant){\n        frappe.db.get_value(\"Employee\",frm.doc.applicant,['basic'], (r) => {\n\t\t\tif (r){\n\t\t\t\tvar basic_salary = r.basic * 0.25;\n\t\t\t\tvar minimum_deduction = 500;\n\t\t\t\tvar per_month_loan \n\t\t\t\tif (basic_salary < minimum_deduction){\n\t\t\t\t    minimum_deduction = basic_salary;\n\t\t\t\t}\n\t\t\t\tif(frm.doc.loan_amount){\n\t\t\t\t   var per_month_loan = (frm.doc.loan_amount / 12)\n\t\t\t\t   if (per_month_loan < minimum_deduction){\n\t\t\t\t       minimum_deduction = per_month_loan;\n\t\t\t\t   }\n\t\t\t\t}\n\t\t\t\tfrm.set_value('repayment_amount',minimum_deduction)\n\t\t\t}\n\t\t})\n    }\n    },\n    applicant(frm){\n        if(frm.doc.applicant){\n\t        frappe.db.get_value(\"Employee\",frm.doc.applicant,['only_first_approver'], (r) => {\n\t\t\tif (r){\n\t\t\t\tfrm.set_value('only_first_approver',r.only_first_approver)\n\t\t\t}\n\t\t})\n\t        \n        }\n    },\n    \n\tvalidate(frm) {\n\t    \n\t\tfrm.trigger(\"loan_validation\")\n\t\tif (frm.doc.loan_type == 'Personal Loan'){\n\t        frappe.call({\n\t            method:'qpic.custom.get_gratuity',\n\t            args:{\n\t                employee : frm.doc.applicant\n\t            },\n\t            callback:function(r){\n\t                var grad = r.message\n\t                var loan_amount = frm.doc.loan_amount\n\t                var total = (loan_amount/grad)*100\n\t                if(total > 75){\n                        frappe.msgprint(__('You can avail only loan for 75% of your end of service gratuity amount'))\n                        frappe.validated = false\n\t                    \n\t                    \n\t                }\n\t                if(frm.doc.loan_amount > 10000){\n\t                    frappe.msgprint(__('Loan Cannot be applied for value more than 10000 QR'))\n                        frappe.validated = false\n\t                }\n\t               \n\t               \n\t            }\n\t        })\n\t    }\n\t    if (frm.doc.applicant_type == 'Employee'){\n\t        frappe.call({\n\t            method:'qpic.custom.probation_emp',\n\t            args:{\n\t                employee : frm.doc.applicant\n\t            },\n\t            callback:function(r){\n\t                console.log(r.message)\n\t                if (r.message == 'Not Allowed'){\n\t                    frappe.msgprint(__(r.message));\n\t                    frappe.validated = false\n\t                }\n\t            }\n\t        })\n\t    }\n\t    \n\t},\n\t\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Full and Final Settlement",
  "enabled": 1,
  "modified": "2022-10-27 08:06:28.830996",
  "module": null,
  "name": "Full and Final Settlement-Form",
  "script": "frappe.ui.form.on('Full and Final Settlement', {\r\n    refresh(frm) {\r\n        if (frm.doc.workflow_state == \"Approved\") {\r\n            frm.add_custom_button(__(\"Print F & F\"), function () {\r\n\r\n                var f_name = frm.doc.name\r\n                var print_format = \"Full and Final Settlement\";\r\n                window.open(frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\r\n                    + \"doctype=\" + encodeURIComponent(\"Full and Final Settlement\")\r\n                    + \"&name=\" + encodeURIComponent(f_name)\r\n                    + \"&trigger_print=1\"\r\n                    + \"&format=\" + print_format\r\n                    + \"&no_letterhead=0\"\r\n                ))\r\n            });\r\n        }\r\n    },\r\n    total_worked(frm){\r\n         if (frm.doc.total_worked) {\r\n            if(frm.doc.grade == 'Office Staff' || frm.doc.grade == 'Factory Staff'){\r\n                var eligible_gratuity = (30 / 365) * frm.doc.total_worked\r\n                frm.set_value('eligible_gratuity', eligible_gratuity.toFixed(2))\r\n            }\r\n            else{\r\n                 var eligible_gratuity = (21 / 365) * frm.doc.total_worked\r\n                frm.set_value('eligible_gratuity', eligible_gratuity.toFixed(2))\r\n            }\r\n         }\r\n    },\r\n    validate(frm) {\r\n        frm.trigger(\"leaves_encashed\")\r\n        var gratuity_amount = (frm.doc.basic_salary / 30) * frm.doc.eligible_gratuity\r\n        // frm.set_value('gratuity_amount', gratuity_amount.toFixed(2))\r\n        frm.set_value('gratuity_amount', Math.round(gratuity_amount))\r\n            //     frappe.call({\r\n            //         method:'qpic.custom.get_gratuity',\r\n            //         args:{\r\n            //             employee : frm.doc.employee\r\n            //         },\r\n            //         callback:function(r){\r\n            //              frm.set_value('gratuity_amount',r.message)\r\n            //         }\r\n            //     })\r\n        if (frm.doc.employee) {\r\n            var basic = frm.doc.basic_salary\r\n            var dow = frm.doc.no_of_days_worked\r\n            var cal = (((basic / dow) / 8) * 1.25) * frm.doc.normal_over_time\r\n            frm.set_value('amount', Math.floor(cal.toFixed(2)))\r\n        }\r\n        if (frm.doc.employee) {\r\n            var ot = frm.doc.amount\r\n            var wot = frm.doc.wot_amount\r\n            var hot = frm.doc.hot_amount\r\n            var cal = ot + wot + hot\r\n            if (cal) {\r\n                frm.set_value('total_ot', cal.toFixed(2))\r\n            }\r\n        }\r\n        if (frm.doc.employee) {\r\n            var leave_pay = (frm.doc.leave_pay)\r\n            var gra_amount = Math.ceil(frm.doc.gratuity_amount)\r\n            var leave_grat = (parseInt(leave_pay) + parseInt(gra_amount)) + (parseInt(frm.doc.additions))- (frm.doc.air_ticket_deduction + frm.doc.loan_other_deduction)\r\n            if (leave_grat) {\r\n                frm.set_value('leave_gratuity_total', leave_grat.toFixed(2))\r\n                var net_pay = leave_grat + frm.doc.total_salary\r\n                frm.set_value('net_pay', net_pay)\r\n            }\r\n        }\r\n        if (frm.doc.employee) {\r\n            var basic = frm.doc.basic_salary\r\n            var dow = frm.doc.no_of_days_worked\r\n            var cal = (((basic / dow) / 8) * 2.0) * frm.doc.holiday_over_time\r\n            if (cal) {\r\n                frm.set_value('hot_amount', cal.toFixed(2))\r\n            }\r\n        }\r\n        if (frm.doc.employee) {\r\n            var basic = frm.doc.basic_salary\r\n            var dow = frm.doc.no_of_days_worked\r\n            var cal = (((basic / dow) / 8) * 1.5) * frm.doc.friday_over_time\r\n            if (cal) {\r\n                frm.set_value('wot_amount', cal.toFixed(2))\r\n            }\r\n        }\r\n        if (frm.doc.employee) {\r\n            var basic = frm.doc.basic_salary\r\n            var dow = frm.doc.total_working_days\r\n            var earned_basic = ((basic / dow) * (frm.doc.no_of_days_worked- frm.doc.absent_days))\r\n            if (earned_basic) {\r\n                frm.set_value('earned_basic', earned_basic.toFixed(2))\r\n            }\r\n            \r\n            var earned_food_allowance = ((frm.doc.food_allowance/dow)*(frm.doc.no_of_days_worked - frm.doc.absent_days))\r\n            if (earned_food_allowance) {\r\n                frm.set_value('earned_food_allowance', earned_food_allowance.toFixed(2))\r\n            }\r\n            var tott = (parseFloat(frm.doc.total_ot) + parseFloat(frm.doc.earned_basic)+ parseFloat(frm.doc.hra_pay )+ parseFloat(frm.doc.month_allowance)+parseFloat(frm.doc.earned_food_allowance)+parseFloat(frm.doc.prodallowance)+parseFloat(frm.doc.arrears))-(parseFloat(frm.doc.monthly_deduction))\r\n            frm.set_value('total_salary',tott)\r\n        }\r\n        if(frm.doc.employee){\r\n            var date1 = new Date(frm.doc.date_of_joining);\r\n            var date2 = new Date(frm.doc.pay_end_date);\r\n            var diffTime = Math.abs(date2 - date1);\r\n            var diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)); \r\n            frm.set_value('employment_duration',diffDays +1)\r\n            frm.set_value('total_worked',diffDays +1)\r\n    \r\n         }   \r\n        if (frm.doc.employee) {\r\n            var a = frm.doc.basic_salary / 30\r\n            var b = frm.doc.basic_salary / 31\r\n            var x = frm.doc.no_of_days_worked - 31\r\n            var y = (x) * b\r\n            var p = 31\r\n            var q = p * a\r\n            var z = q + y - 2\r\n            // frm.set_value('earned_basic', z.toFixed(2))\r\n            \r\n            //var basic = frm.doc.basic \r\n            // var dow = frm.doc.total_working_days \r\n            // var salary_amount_pay = ((basic/30)*(frm.doc.no_of_days_worked - frm.doc.absent_days))\r\n            //======= \r\n            //frm.set_value('salary_amount_pay',salary_amount_pay.toFixed(2))\r\n            // frm.set_value('earned_food_allowance',earned_food_allowance.toFixed(2))\r\n            //======\r\n\r\n            // frm.set_value('food_allowance',zf.toFixed(2))\r\n        }\r\n       \r\n    },\r\n    onload(frm) {\r\n        frappe.call({\r\n            method: \"qpic.custom.get_reg_form\",\r\n            args: {\r\n                'employee': frm.doc.employee\r\n            },\r\n            callback: function (d) {\r\n                if (d.message) {\r\n                    frm.set_value('resignation_form', d.message[0])\r\n                    frm.set_value('pay_start_date', d.message[1])\r\n                    frm.set_value('pay_end_date', d.message[2])\r\n\r\n                }\r\n            }\r\n        })\r\n        // frappe.call({\r\n        //     method:\"qpic.utils.get_loan_detail\",\r\n        //     args:{\r\n        //        'employee':frm.doc.employee \r\n        //     },\r\n        //     callback:function(d){\r\n        //         if(d.message){\r\n        //             frm.set_value('loan_other_deduction',d.message[-1])\r\n        //         }\r\n        //     }\r\n        // })\r\n        frappe.call({\r\n            method: \"qpic.custom.calculate_attendance\",\r\n            args: {\r\n                'employee': frm.doc.employee,\r\n            },\r\n            callback: function (d) {\r\n                if (d.message) {\r\n                    var start = new Date(frm.doc.pay_start_date);\r\n                    var end = new Date(frm.doc.pay_end_date);\r\n                    var diffDays = end.getDate() - start.getDate()\r\n                    frm.set_value('no_of_days_worked', diffDays + 1)\r\n                    frm.set_value('normal_over_time', d.message[0].ot)\r\n                    frm.set_value('friday_over_time', d.message[0].wot)\r\n                    frm.set_value('holiday_over_time', d.message[0].hot)\r\n                }\r\n            }\r\n        })\r\n        frappe.call({\r\n            method: \"qpic.custom.get_current_month_date\",\r\n            args: {\r\n                'employee': frm.doc.employee,\r\n            },\r\n            callback: function (d) {\r\n                if (d.message) {\r\n                    frm.set_value('total_working_days', d.message)\r\n                }\r\n            }\r\n        })\r\n            \r\n    },\r\n    \r\n    leaves_encashed(frm) {\r\n        var basic = frm.doc.basic_salary\r\n        var leave = frm.doc.leaves_encashed\r\n        var tw = 30\r\n        console.log(basic)\r\n        console.log(leave)\r\n        console.log(tw)\r\n        var cal = ((basic / tw) * leave)\r\n        frm.set_value('leave_pay', cal.toFixed(2))\r\n    }\r\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Resignation Form",
  "enabled": 1,
  "modified": "2022-10-19 14:16:02.366445",
  "module": null,
  "name": "Resignation Form-Form",
  "script": "frappe.ui.form.on('Resignation Form', {\n\trefresh(frm) {\n\t\t  if(frm.doc.workflow_state ==\"Exit\"){\n\t     frm.add_custom_button(__('F & F Statement'), function() {\n\t        frappe.db.get_value('Full and Final Settlement',{'employee': frm.doc.employee },'name')\n\t    .then(r => {\n        if(r.message && Object.entries(r.message).length === 0){\n            console.log('hello')\n             frappe.route_options = { 'employee':frm.doc.employee,'employee_name': frm.doc.employee_name}\n            frappe.set_route('Form','Full and Final Settlement','new-full-and-final-settlement-1')\n            \n        }\n        else{\n           frappe.set_route('Form','Full and Final Settlement',r.message.name)\n           console.log(\"hiii\")\n        }\n        \n    })\n\t\t\t\n                 });\n\t\t   }\n\t        if(frm.doc.workflow_state == \"Exit\"){\n    \t\t frm.add_custom_button(__(\"Experience Certificate\"), function () {\n    \t\t\t\n    \t\t\tvar f_name = frm.doc.name\n    \t\t\tvar print_format = \"Experience Certificate\";\n    \t\t\twindow.open(frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\n    \t\t\t\t+ \"doctype=\" + encodeURIComponent(\"Resignation Form\")\n    \t\t\t\t+ \"&name=\" + encodeURIComponent(f_name)\n    \t\t\t\t+ \"&trigger_print=1\"\n    \t\t\t\t+ \"&format=\" + print_format\n    \t\t\t\t+ \"&no_letterhead=0\"\n    \t\t\t\t// + \"&letterhead=\" + encodeURIComponent(letter_head)\n    \t\t\t))\n\t\t});   \n\t        }\t\n\t},\n\tvalidate(frm){\n\t    if(frm.doc.employee_name){\n\t        frm.set_value('session_user',frappe.session.user)\n\t       // frm.set_value('date_of_change',new Date())\n      }\n\t            \n\t},\n\tonload(frm){\n\t    if(frm.doc.workflow_state == 'Pending for HOD'){\n\t    frm.set_value('hods_relieving_date',frappe.datetime.get_today())\n\t}\n\tif(frm.doc.workflow_state == 'Pending for HR'){\n\t    frm.set_value('approved_relieving_date',frappe.datetime.get_today())\n\t}\n// \tif(frm.doc.workflow_state == 'Draft'){\n// \t    frm.set_value('relieving_date',frappe.datetime.get_today())\n// \t}\n\t}\n\t\t\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Salary Increment",
  "enabled": 1,
  "modified": "2022-07-23 13:38:28.433429",
  "module": null,
  "name": "Salary Increment-Form",
  "script": "frappe.ui.form.on('Salary Increment', {\n    validate(frm) {\n        if (frm.doc.incremented_by == \"Value\") {\n            var total = frm.doc.basic_1 + frm.doc.hra_1 + frm.doc.transportation_1;\n            frm.set_value('total_monthly_salary_1', total)\n        }\n        if (frm.doc.incremented_by == \"Percentage\") {\n            var p_b = ((frm.doc.percentage / 100) * frm.doc.basic_1);\n            var p_basic = frm.doc.basic_1 + p_b;\n            frm.set_value('basic_1', p_basic)\n\n            var p_h = ((frm.doc.percentage / 100) * frm.doc.hra_1);\n            var p_hra = frm.doc.hra_1 + p_h;\n            frm.set_value('hra_1', p_hra)\n\n            var p_t = ((frm.doc.percentage / 100) * frm.doc.transportation_1);\n            var p_tran = frm.doc.transportation_1 + p_t;\n            frm.set_value('transportation_1', p_tran)\n\n            var p_total = p_basic + p_hra + p_tran;\n            frm.set_value('total_monthly_salary_1', p_total)\n\n        }\n        if (frm.doc.employee_number) {\n            frm.set_value(\"date_of_increment\", new Date())\n        }\n\n    },\n    refresh(frm){\n        frm.add_custom_button(__(\"Salary Increment\"), function () {\n\n                var f_name = frm.doc.name\n                var print_format = \"Salary Increment\";\n                window.open(frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\n                    + \"doctype=\" + encodeURIComponent(\"Salary Increment\")\n                    + \"&name=\" + encodeURIComponent(f_name)\n                    + \"&trigger_print=1\"\n                    + \"&format=\" + print_format\n                    + \"&no_letterhead=0\"\n                    // + \"&letterhead=\" + encodeURIComponent(letter_head)\n                ));\n            });\n\n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee Promotion",
  "enabled": 1,
  "modified": "2022-07-23 13:21:23.215022",
  "module": null,
  "name": "Employee Promotion-Form",
  "script": "frappe.ui.form.on('Employee Promotion', {\n\tonload(frm){\n\t    frm.add_custom_button(__(\"Designation Change\"), function () {\n    \t\t\t\n    \t\t\tvar f_name = frm.doc.name\n    \t\t\tvar print_format = \"Designation Change\";\n    \t\t\twindow.open(frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\n    \t\t\t\t+ \"doctype=\" + encodeURIComponent(\"Employee Promotion\")\n    \t\t\t\t+ \"&name=\" + encodeURIComponent(f_name)\n    \t\t\t\t+ \"&trigger_print=1\"\n    \t\t\t\t+ \"&format=\" + print_format\n    \t\t\t\t+ \"&no_letterhead=0\"\n    \t\t\t\t// + \"&letterhead=\" + encodeURIComponent(letter_head)\n    \t\t\t));\n    // \t\t}\n\t\t\n\n\t\t});   \n    \t\t\n    },\n    validate(frm){\n        if (frm.doc.promotion_date) {\n            frm.set_value(\"date_of_change\", new Date())\n    }\n    } \n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leave Salary",
  "enabled": 1,
  "modified": "2022-11-17 12:07:40.525220",
  "module": null,
  "name": "Leave Salary-Form",
  "script": "frappe.ui.form.on('Leave Salary', {\n\tabsent_days(frm){\n\t    console.log(\"hi\");\n        var bas = frm.doc.basic;\n        var nodw = frm.doc.no_of_days_worked;\n        var amount_of_worked = (bas/30)* ((nodw) - frm.doc.absent_days);\n        console.log(\"hi\");\n        var fd_al = frm.doc.food;\n        var fd = (fd_al/30)*((nodw) - frm.doc.absent_days);\n        console.log(\"hi\");\n        var me_al = frm.doc.mobile_allowance;\n        var eme = (me_al/30)*((nodw) - frm.doc.absent_days);\n        console.log(\"hi\");\n        var hra = frm.doc.hra_salary;\n        var ehra = (hra/30)*((nodw) - frm.doc.absent_days);\n        console.log(\"hi\");\n        frm.set_value('earned_hra',ehra);\n        frm.set_value('earned_mobile_allowance',eme);\n        frm.set_value('food_allowance',fd);\n        frm.set_value('salary_amount_pay',amount_of_worked);\n\t},\n\tot_hours(frm){\n\t    if(frm.doc.employee){\n\t        console.log(\"hi\");\n\t        var basic = frm.doc.basic;\n\t        var cal = (((basic/30)/8)*1.25) * frm.doc.ot_hours;\n\t        if(cal){\n\t            frm.set_value('ot_amount',cal.toFixed(2));\n\t        }\n\t        else{\n\t            frm.set_value('ot_amount',0);\n\t        }\n        }\n\t},\n\twot_hours(frm){\n\t    if(frm.doc.employee){\n\t        console.log(\"hi\");\n            var basic = frm.doc.basic; \n\t        var cal = (((basic/30)/8) *1.5)* frm.doc.wot_hours;\n\t        if(cal){\n\t        frm.set_value('wot_amount',cal.toFixed(2));\n            }\n            else{\n             frm.set_value('wot_amount',0);\n            }\n        }\n\t},\n\thot_hours(frm){\n\t    if(frm.doc.employee){\n\t        console.log(\"hi\");\n            var basic = frm.doc.basic;\n\t        var cal = (((basic/30)/8)*2.0) * frm.doc.hot_hours;\n\t        if(cal){\n\t        frm.set_value('hot_amount',cal.toFixed(2));\n            }\n            else{\n             frm.set_value('hot_amount',0);\n            }\n        }\n\t},\n\tmonthly_deduction(frm){\n\t    console.log(\"hi\");\n\t    var ma = parseFloat(frm.doc.month_allowance);\n\t    var sal = parseFloat(frm.doc.salary_amount_pay);\n        var arr = parseFloat(frm.doc.arrears);\n        var ot = parseFloat(frm.doc.ot_amount);\n        var wot = parseFloat(frm.doc.wot_amount); \n        var hot  = parseFloat(frm.doc.hot_amount);\n        var prod = parseFloat(frm.doc.prodallowance);\n        var food = parseFloat(frm.doc.food_allowance);\n        var mob = parseFloat(frm.doc.earned_mobile_allowance);\n        var hra = parseFloat(frm.doc.earned_hra);\n        var md = parseFloat(frm.doc.monthly_deduction);\n        var oi = parseFloat(frm.doc.ot_incentive);\n        var total = ((ma + sal + arr + ot + wot+ hot + food + prod + mob + hra + oi) - md);\n        console.log(total);\n        var tot_ot = ot + wot + hot;\n        console.log(tot_ot);\n        frm.set_value('overall_ot_amount',tot_ot.toFixed(2));\n        frm.set_value('total_amount',total.toFixed(2));\n\t},\n\tot_incentive(frm){\n\t    console.log(\"hi\");\n\t    frm.trigger('monthly_deduction');\n\t},\n\tprodallowance(frm){\n\t    console.log(\"hi\");\n\t    frm.trigger('monthly_deduction');\n\t},\n\tmonth_allowance(frm){\n\t    console.log(\"hi\");\n\t    frm.trigger('monthly_deduction');\n\t},\n\tarrears(frm){\n\t    console.log(\"hi\");\n\t    frm.trigger('monthly_deduction');\n\t},\n\tafter_save(frm){\n\t    frm.add_custom_button(__(\"Print\"), function () {\n\t        console.log(\"hi\");\n\t\t\tvar f_name = frm.doc.name;\n\t\t\tvar print_format = \"Leave Salary\";\n\t\t\twindow.open(frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\n\t\t\t\t+ \"doctype=\" + encodeURIComponent(\"Leave Salary\")\n\t\t\t\t+ \"&name=\" + encodeURIComponent(f_name)\n\t\t\t\t+ \"&trigger_print=1\"\n\t\t\t\t+ \"&format=\" + print_format\n\t\t\t\t+ \"&no_letterhead=0\"\n\t\t\t));\n        });  \n\t},\n\temployee(frm){\n\t    if(frm.doc.employee){\n\t        frappe.call({\n    \t        method:\"qpic.custom.get_leave_application\",\n    \t        args:{\n    \t           'employee':frm.doc.employee,\n    \t           'from_date':frm.doc.leave_start_date\n    \t        },\n    \t        callback(d){\n    \t            if (d.message[11] == 'Annual Leave'){\n        \t            console.log(\"hi\");\n        \t            console.log(d.message);\n        \t            frm.set_value('from_date',d.message[0]);\n        \t            frm.set_value('to_date',d.message[1]);\n        \t            frm.set_value('leave_start_date',d.message[2]);\n        \t            frm.set_value('leave_end_date',d.message[3]);\n        \t            frm.set_value('no_of_days_worked',d.message[4]);\n    \t                frm.set_value('ot_hours',d.message[5]);\n        \t            frm.set_value('wot_hours',d.message[6]);\n        \t            frm.set_value('hot_hours',d.message[7]);\n        \t            frm.set_value('lop_days',d.message[8]);\n        \t            frm.set_value('leaves_availed',d.message[9]);\n        \t            frm.set_value('accrued_leaves',d.message[10]);\n        \t            frm.set_value('absent_days',d.message[12] + d.message[13]);\n        \t            console.log(d.message[4]);\n        \t            console.log(d.message[9]);\n        \t            console.log(d.message[10]);\n        \t            console.log(d.message[11]);\n        \t            console.log(d.message[12]);\n        \t            console.log(d.message[13]);\n        \t            if (d.message[10] > d.message[9]){\n        \t                frm.set_value('leave_balance',d.message[10] - d.message[9]);\n        \t            }\n        \t            else{\n        \t                frm.set_value('leave_balance',0);\n        \t            }\n        \t            if(frm.doc.leave_balance == 0){\n    \t                frm.set_df_property(\"leaves_encashed\",\"read_only\",1)\n    \t                }\n        \t            console.log(frm.doc.leave_balance);\n        \t            console.log(\"hi\");\n                \t    var a = parseFloat(frm.doc.accrued_leaves);\n                \t    var b = parseFloat(frm.doc.leaves_encashed);\n                \t    var c = a + b;\n                \t    frm.set_value('no_of_days',c.toFixed(2));\n    \t            }\n    \t        }\n            });\n\t    }\n        if(frm.doc.employee){\n\t        console.log(\"hi\");\n\t        var basic = frm.doc.basic;\n\t        var cal = (((basic/30)/8)*1.25) * frm.doc.ot_hours;\n\t        if(cal){\n\t            frm.set_value('ot_amount',cal.toFixed(2));\n\t        }\n\t        else{\n\t            frm.set_value('ot_amount',0);\n\t        }\n\t        console.log(\"hi\");\n            var basic = frm.doc.basic; \n\t        var cal = (((basic/30)/8) *1.5)* frm.doc.wot_hours;\n\t        if(cal){\n\t        frm.set_value('wot_amount',cal.toFixed(2));\n            }\n            else{\n             frm.set_value('wot_amount',0);\n            }\n\t        console.log(\"hi\");\n            var basic = frm.doc.basic;\n\t        var cal = (((basic/30)/8)*2.0) * frm.doc.hot_hours;\n\t        if(cal){\n\t        frm.set_value('hot_amount',cal.toFixed(2));\n            }\n            else{\n             frm.set_value('hot_amount',0);\n            }\n        }\n        console.log(\"hi\");\n        var bas = frm.doc.basic;\n        var nodw = frm.doc.no_of_days_worked;\n        var amount_of_worked = (bas/30)* ((nodw) - frm.doc.absent_days);\n        console.log(\"hi\");\n        var fd_al = frm.doc.food;\n        var fd = (fd_al/30)*((nodw) - frm.doc.absent_days);\n        console.log(\"hi\");\n        var me_al = frm.doc.mobile_allowance;\n        var eme = (me_al/30)*((nodw) - frm.doc.absent_days);\n        console.log(\"hi\");\n        var hra = frm.doc.hra_salary;\n        var ehra = (hra/30)*((nodw) - frm.doc.absent_days);\n        console.log(\"hi\");\n        frm.set_value('earned_hra',ehra);\n        frm.set_value('earned_mobile_allowance',eme);\n        frm.set_value('food_allowance',fd);\n        frm.set_value('salary_amount_pay',amount_of_worked);\n        console.log(\"hi\");\n\t},\n\tleaves_encashed(frm){\n\t    console.log(\"hi\");\n\t    var a = parseFloat(frm.doc.accrued_leaves);\n\t    var b = parseFloat(frm.doc.leaves_encashed);\n\t    var c = a + b;\n\t    frm.set_value('no_of_days',c.toFixed(2));\n\t},\n\ttransport_expense(frm){\n\t    console.log(\"hi\");\n\t    var bas = parseFloat(frm.doc.basic);\n\t    var ad = parseFloat(frm.doc.addition);\n\t    var dd = parseFloat(frm.doc.deduction);\n\t    var af = parseFloat(frm.doc.air_fair);\n\t    var te = parseFloat(frm.doc.transport_expense);\n\t    var nod = parseFloat(frm.doc.no_of_days);\n\t    var total = ((((bas/30)*nod)+ (ad + af + te)) - dd);\n        console.log(total);\n        frm.set_value('total_salary',total.toFixed(2));\n\t},\n\taddition(frm){\n\t    console.log(\"hi\");\n\t    frm.trigger('transport_expense');\n\t},\n\tdeduction(frm){\n\t    console.log(\"hi\");\n\t    frm.trigger('transport_expense');\n\t},\n\tair_fair(frm){\n\t    console.log(\"hi\");\n\t    frm.trigger('transport_expense');\n\t},\n\ttotal_salary(frm){\n         console.log(\"hi\");\n         var s1 = parseFloat(frm.doc.total_amount);\n         var s2 = parseFloat(frm.doc.total_salary);\n         var s = s1 + s2;\n         frm.set_value('total_released_amount',s.toFixed(2));\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Loan",
  "enabled": 1,
  "modified": "2022-08-17 08:25:33.570780",
  "module": null,
  "name": "Loan-Form",
  "script": "frappe.ui.form.on('Loan', {\n// \tvalidate(frm) {\n// \t\tvar next_mnth_date = frappe.datetime.add_months(frappe.datetime.month_start(),1)\n// \t\tfrm.set_value('repayment_start_date',next_mnth_date)\n// \t\tfrm.set_value('repay_from_salary',1)\n// \t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Salary Slip",
  "enabled": 1,
  "modified": "2022-08-29 11:57:43.591177",
  "module": null,
  "name": "Salary Slip-Form",
  "script": "frappe.ui.form.on('Salary Slip', {\n\trefresh(frm) {\n    \t\t frm.add_custom_button(__(\"Salary Slip\"), function () {\n    \t\t\tvar f_name = frm.doc.name\n    \t\t\tvar print_format = \"Salary Slip\";\n    \t\t\twindow.open(frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\n    \t\t\t\t+ \"doctype=\" + encodeURIComponent(\"Salary Slip\")\n    \t\t\t\t+ \"&name=\" + encodeURIComponent(f_name)\n    \t\t\t\t+ \"&trigger_print=1\"\n    \t\t\t\t+ \"&format=\" + print_format\n    \t\t\t\t+ \"&no_letterhead=0\"\n    \t\t\t));\n\n\t\t    });   \n\t\t  \tfrm.set_query(\"employee\", function() {\n\t\t\treturn {\n\t\t\t\tfilters: {\t\n\t\t\t\t\t'status':'Active',\n\t\t\t\t\t'company':'Qatar Polymer Industrial Company'\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t\t\t\n\t\t\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quotation",
  "enabled": 1,
  "modified": "2022-10-28 08:46:29.654217",
  "module": null,
  "name": "Quotation-Form",
  "script": "frappe.ui.form.on('Quotation', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.add_custom_button(__(\"Print\"), function () {\n\t\t\tvar f_name = frm.doc.name\n\t\t\tvar print_format = \"Quotation\";\n\t\t\twindow.open(frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\n\t\t\t\t+ \"doctype=\" + encodeURIComponent(\"Quotation\")\n\t\t\t\t+ \"&name=\" + encodeURIComponent(f_name)\n\t\t\t\t+ \"&trigger_print=1\"\n\t\t\t\t+ \"&format=\" + print_format\n\t\t\t\t+ \"&no_letterhead=0\"\n\t\t\t\t\n\t\t\t));\n\n\n\t\t});\n\n\t},\n\tvalidate(frm){\n\t    $.each(frm.doc.items, function (i, d) {\n\t        console.log(d.cost)\n\t        if(d.cost>d.rate){\n\t\t\t\tfrappe.throw(\"Cost can't be less than rate\")\n\t        }\n\t        else{\n\t\t\t\tfrappe.validated = true;\n            }\n\t\t})\n\t}\n\t\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2022-08-20 12:34:06.812394",
  "module": null,
  "name": "Purchase Order-Form",
  "script": "frappe.ui.form.on('Purchase Order', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.add_custom_button(__(\"Print\"), function () {\n\t\t\tvar f_name = frm.doc.name\n\t\t\tvar print_format = \"Purchase Order QPIC\";\n\t\t\twindow.open(frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\n\t\t\t\t+ \"doctype=\" + encodeURIComponent(\"Purchase Order\")\n\t\t\t\t+ \"&name=\" + encodeURIComponent(f_name)\n\t\t\t\t+ \"&trigger_print=1\"\n\t\t\t\t+ \"&format=\" + print_format\n\t\t\t\t+ \"&no_letterhead=0\"\n\t\t\t\t\n\t\t\t));\n\n\n\t\t});\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Job Applicant",
  "enabled": 1,
  "modified": "2022-09-01 15:05:12.394415",
  "module": null,
  "name": "Job Applicant-Form",
  "script": "frappe.ui.form.on('Job Applicant', {\n    refresh(frm) {\n        // if (!frm.doc.__islocal) {\n\n        //     if (frm.doc.status == 'Accepted')\n        //         frm.add_custom_button(__('Download Application Form'), function () {\n        //             var f_name = frm.doc.name\n        //             var print_format = \"Application form\";\n        //             window.open(frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\n        //                 + \"doctype=\" + encodeURIComponent(frm.doc.doctype)\n        //                 + \"&name=\" + encodeURIComponent(f_name)\n        //                 + \"&trigger_print=1\"\n        //                 + \"&format=\" + print_format\n        //                 + \"&no_letterhead=0\"\n        //             ));\n        //         })\n        // }\n        if (!frm.doc.__islocal) {\n            frappe.db.get_value('Job Offer', { 'job_applicant': frm.doc.name, 'status': \"Accepted\", 'workflow_state': \"Approved by CEO\" }, 'name')\n                .then(jo => {\n                    console.log('ki')\n                    if (jo.message && Object.entries(jo.message).length !== 0) {\n                        frm.add_custom_button(__(' Joining Form'), function () {\n                            frappe.db.get_value('Joining Form', { 'job_applicant': frm.doc.name },'name')\n                                .then(r => {\n                                    if (r.message && Object.entries(r.message).length === 0) {\n                                        console.log(\"hii\")\n                                        frappe.route_options = { 'job_applicant': frm.doc.name,'job_offer': jo.message.name }\n                                        frappe.set_route('Form', 'Joining Form', 'new-joining-form-1')\n                                    }\n                                    else {\n                                        frappe.set_route('Form', 'Joining Form', r.message.name)\n                                        console.log(\"hi\")\n                                    }\n                                })\n                        })\n                    }\n\n                })\n\n        }\n            },\n\n        date_of_birth: function (frm) {\n            frm.trigger(\"age_calculation\")\n        },\n\n        validate: function (frm) {\n            frm.trigger(\"age_calculation\")\n            // frappe.msgprint(__('Thank you for Submission, your application is in Review'));\n\n        },\n         workflow_state(frm){\n            if(frm.doc.workflow_state == 'Review'){\n                frappe.msgprint(__('Thank you for filling the Application Form '));\n            }\n    },\n        age_calculation: function (frm) {\n            var dob = frm.doc.date_of_birth;\n            var birthDate = new Date(dob);\n            var difference = Date.now() - birthDate.getTime();\n            var ageDate = new Date(difference);\n            var calculatedAge = Math.abs(ageDate.getUTCFullYear() - 1970);\n            frm.set_value(\"age\", calculatedAge)\n            if (calculatedAge < 18) {\n                frappe.msgprint(\"Lesser than age 18 will not be allowed\")\n                frappe.validated = false;\n            }\n        },\n        \n\n        same_as_present_address(frm) {\n            frm.set_value(\"address_\", frm.doc.address_2)\n            frm.set_value(\"address_2\", frm.doc.address_3)\n            frm.set_value(\"pin\", frm.doc.pin_2)\n        },\n        submit_application_form(frm){\n            frm.set_value(\"workflow_state\",\"Review\")\n            frm.hide(submit_application_form)\n            frm.save()\n        }\n\n})\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Job Offer",
  "enabled": 1,
  "modified": "2022-09-01 15:43:07.877045",
  "module": null,
  "name": "Job Offer-Form",
  "script": "frappe.ui.form.on('Job Offer', {\n    validate(frm){\n        var gross_salary = frm.doc.fixed_remuneration + frm.doc.mobile_reimbursement + frm.doc.mobile_conveyance\n        frm.set_value('gross_salary', gross_salary)\n        if(frm.doc.offer_valid_upto < frm.doc.offer_date){\n            frappe.msgprint(\"Offer Valid Upto cannot be before Offer Letter Date\");\n            frappe.validated = false;\n        }\n        if (frm.doc.workflow_state==\"Approved by CEO\")\n                frappe.msgprint(__('Mail Sent to Candidate')); \n    },\n    \n    offer_print(frm){\n       \n    },\n   \n\trefresh(frm) {\n        if(frm.doc.__islocal){\n\t    frm.trigger(\"get_today_date\");\n    \t}\n// \tif(!frm.doc.__islocal){\n// \t     if (frappe.user.has_role('HR User') && frm.doc.workflow_state==\"Approved by CEO\"){\n// \t    frm.add_custom_button(__(' Generate Offer Letter'), function() {\n\t        \n\t       \n// \t    });\n// \t     }\n\n// \t}\n\t},\n\n\t    get_today_date:function(frm){\n\t       frm.set_value('date_1',frappe.datetime.nowdate())\n\t\t\tfrm.set_value('offer_date',frappe.datetime.nowdate())\n\t\t\t},\n\t\t\n\t\treporting_to(frm){\n            frappe.db.get_value('User', { 'username': frm.doc.reporting_to },'email',(r) => {\n            \n                if( r.email){\n                    frm.set_value( 'employee_user_id', r.email)\n                }\n            })\n\t\t\n\t\t}\n\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Joining Form",
  "enabled": 1,
  "modified": "2022-09-01 15:49:04.572852",
  "module": null,
  "name": "Joining Form-Form",
  "script": "frappe.ui.form.on('Joining Form', {\r\n    \r\n    workflow_state(frm){\r\n        if(frm.doc.workflow_state == 'Review'){\r\n            frappe.msgprint(__('Thank you for filling the Joining Form Please Save and Submit'));\r\n        }\r\n    },\r\n    job_applicant(frm){\r\n        frm.trigger(\"fetch_child_tables\")\r\n        frm.trigger(\"get_today_date\")\r\n\r\n    },\r\n\r\n    validate(frm){\r\n        frm.trigger(\"age_calculation\")\r\n        if(frm.doc.i_agree == 0){\r\n            frappe.msgprint(\"Declaration has to be Agreed to Proceed\")\r\n            frappe.validated = false;\r\n            //  frappe.msgprint(__('Thank you for Submission, your application is in Review'));\r\n\r\n        }\r\n    },\r\n   \r\n\t nomination_form_template(frm){\r\n\t        var f_name = frm.doc.name\r\n                var print_format =\"Nomination Form\";\r\n                 window.open(frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\r\n                    + \"doctype=\" + encodeURIComponent(frm.doc.doctype)\r\n                    + \"&name=\" + encodeURIComponent(f_name)\r\n                    + \"&trigger_print=1\"\r\n                    + \"&format=\" + print_format\r\n                    + \"&no_letterhead=0\"\r\n                  ));\r\n\t},\r\n    undertaking_form(frm){\r\n        \t var f_name = frm.doc.name\r\n                var print_format =\"Undertaking Form\";\r\n                 window.open(frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\r\n                    + \"doctype=\" + encodeURIComponent(frm.doc.doctype)\r\n                    + \"&name=\" + encodeURIComponent(f_name)\r\n                    + \"&trigger_print=1\"\r\n                    + \"&format=\" + print_format\r\n                    + \"&no_letterhead=0\"\r\n                  ));\r\n    },\r\n    reporting_form(frm){\r\n        var f_name = frm.doc.name\r\n                var print_format =\"Reporting Form\";\r\n                 window.open(frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\r\n                    + \"doctype=\" + encodeURIComponent(frm.doc.doctype)\r\n                    + \"&name=\" + encodeURIComponent(f_name)\r\n                    + \"&trigger_print=1\"\r\n                    + \"&format=\" + print_format\r\n                    + \"&no_letterhead=0\"\r\n                  ));\r\n    },\r\n    joining_form(frm){\r\n        var f_name = frm.doc.name\r\n                var print_format =\"Joining Form\";\r\n                 window.open(frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\r\n                    + \"doctype=\" + encodeURIComponent(frm.doc.doctype)\r\n                    + \"&name=\" + encodeURIComponent(f_name)\r\n                    + \"&trigger_print=1\"\r\n                    + \"&format=\" + print_format\r\n                    + \"&no_letterhead=0\"\r\n                  ));\r\n    },\r\n    \r\n    fetch_child_tables(frm){\r\n        frm.clear_table('language');\r\n        frappe.model.with_doc('Job Applicant', frm.doc.job_applicant, function () {\r\n        let source_doc = frappe.model.get_doc('Job Applicant', frm.doc.job_applicant);\r\n        $.each(source_doc.language, function (index, source_row) {\r\n            const target_row = frm.add_child('language');\r\n            target_row.language = source_row.language;\r\n            target_row.read = source_row.read;\r\n            target_row.write = source_row.write;\r\n            target_row.speak = source_row.speak;\r\n            frm.refresh_field('language');\r\n        });\r\n    });\r\n        frm.clear_table('education');\r\n        frappe.model.with_doc('Job Applicant', frm.doc.job_applicant, function () {\r\n        let source_doc = frappe.model.get_doc('Job Applicant', frm.doc.job_applicant);\r\n        $.each(source_doc.education, function (index, source_row) {\r\n            const target_row = frm.add_child('education');\r\n            target_row.course = source_row.course;\r\n            target_row.school_univ = source_row.school_univ;\r\n            target_row.qualification = source_row.qualification;\r\n            target_row.level = source_row.level;\r\n            target_row.year_of_passing = source_row.year_of_passing;\r\n            target_row.class_per = source_row.class_per;\r\n            target_row.maj_opt_subj = source_row.maj_opt_subj;\r\n            frm.refresh_field('education');\r\n        });\r\n    });\r\n\t   \r\n    \r\n\t   frm.clear_table('experience');\r\n    frappe.model.with_doc('Job Applicant', frm.doc.job_applicant, function () {\r\n        let source_doc = frappe.model.get_doc('Job Applicant', frm.doc.job_applicant);\r\n        $.each(source_doc.external_work_history, function (index, source_row) {\r\n            const target_row = frm.add_child('experience');\r\n            target_row.company_name = source_row.company_name;\r\n            target_row.designation = source_row.designation;\r\n            target_row.salary = source_row.salary;\r\n            target_row.fixed = source_row.fixed_salary;\r\n            target_row.variable = source_row.variables;\r\n            target_row.address = source_row.address;\r\n            target_row.contact = source_row.contact;\r\n            target_row.reason_of_change = source_row.reason_of_change;\r\n            target_row.from = source_row.from;\r\n            target_row.to = source_row.to;\r\n            frm.refresh_field('experience');\r\n        });\r\n    }); \r\n    \r\n    \r\n    },\r\n\trefresh(frm) {\r\n\t    \r\n\t    \tif(!frm.doc.__islocal){\r\n\t    \t    frm.add_custom_button(__('Download Joining Form'), function() {\r\n            var f_name = frm.doc.name\r\n                var print_format =\"Joining form\";\r\n                 window.open(frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\r\n                    + \"doctype=\" + encodeURIComponent(frm.doc.doctype)\r\n                    + \"&name=\" + encodeURIComponent(f_name)\r\n                    + \"&trigger_print=1\"\r\n                    + \"&format=\" + print_format\r\n                    + \"&no_letterhead=0\"\r\n                  ));\r\n        })\r\n\t    if((frappe.user.has_role('HR User') && frm.doc.workflow_state ==\"Submitted\")){\r\n\t     frm.add_custom_button(__('Employee'), function() {\r\n\t        frappe.db.get_value('Employee',{'job_applicant': frm.doc.job_applicant },'name')\r\n\t    .then(r => {\r\n        if(r.message && Object.entries(r.message).length === 0){\r\n            console.log('hello')\r\n             frappe.route_options = { 'job_applicant':frm.doc.job_applicant,'joining_form': frm.doc.name,'job_offer':frm.doc.job_offer}\r\n            frappe.set_route('Form','Employee','new-employee-1')\r\n            \r\n        }\r\n        else{\r\n           frappe.set_route('Form','Employee',r.message.name)\r\n           console.log(\"hiii\")\r\n        }\r\n    \r\n    })\r\n\t\t\t\r\n                 });\r\n\t        \r\n\t    }\r\n\t    \t}\r\n\t\t\r\n\t},\r\n\r\n\tdate_of_birth:function(frm){\r\n     frm.trigger(\"age_calculation\")\r\n    },\r\n    \t\r\n\tage_calculation:function(frm){\r\n\t    var dob = frm.doc.date_of_birth;  \r\n    \t var birthDate = new Date(dob);\r\n    \t var difference=Date.now() - birthDate.getTime(); \r\n    \t var  ageDate = new Date(difference); \r\n    \t var calculatedAge = Math.abs(ageDate.getUTCFullYear() - 1970);\r\n    \t frm.set_value(\"age\",calculatedAge)\r\n    \t if (calculatedAge < 18){\r\n    \t     frappe.msgprint(\"Lesser than age 18 will not be allowed\")\r\n    \t     frappe.validated = false;\r\n    \t }\r\n\t},\r\n\t\r\n\tpan(frm){\r\n    var regex = /^[a-z0-9]+$/i;\r\n\tif (regex.test(frm.doc.pan) === false) {\r\n\t\tfrappe.msgprint(__(\"Only Alphabets and Numbers are allowed.\"));\r\n\t\tfrappe.validated = false;\r\n\t}\r\n\t},\r\n    \r\n    \r\n    \tdate_validation:function(frm){\r\n    \t    \r\n\t    if(frm.doc.from > frm.doc.to){\r\n\t        frappe.msgprint(__(\"Future date is not allowed.\"));\r\n\t\t\tfrappe.validated = false;\r\n\t    }\r\n\t},\r\n    \t get_today_date: function (frm) {\r\n            frm.set_value('date', frappe.datetime.nowdate())\r\n            frm.set_value('nominated_date', frappe.datetime.nowdate())\r\n    \t },\r\n})\r\n\t\r\n    \r\n   ",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Final Payroll Entry",
  "enabled": 1,
  "modified": "2022-09-05 14:54:46.026400",
  "module": null,
  "name": "Final Payroll Entry-Form",
  "script": "frappe.ui.form.on('Final Payroll Entry', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_value('date',frappe.datetime.nowdate())\n\t},\n\tonload(frm){\n\t    frm.set_value('date',frappe.datetime.nowdate())\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Travel Request",
  "enabled": 1,
  "modified": "2022-09-27 15:05:19.559550",
  "module": null,
  "name": "Travel Request-Form",
  "script": "frappe.ui.form.on('Travel Request', {\r\n\ttravel_region(frm) {\r\n\t\tif (frm.doc.travel_region == 'Africa' && frm.doc.hotel_required != 'No') {\r\n\t\t\tif (frm.doc.travel_grade == 'CEO') {\r\n\t\t\t\tfrappe.db.get_single_value('Travel Settings', 'hotel_and_per_day_africa')\r\n\t\t\t\t\t.then(r => {\r\n\t\t\t\t\t\tfrm.set_value('hotel_and_per_day_africa', r)\r\n\t\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t\telse if (frm.doc.travel_grade == 'Managers') {\r\n\t\t\t\tfrappe.db.get_single_value('Travel Settings', 'hotel_and_per_day_m_africa')\r\n\t\t\t\t\t.then(r => {\r\n\t\t\t\t\t\tfrm.set_value('hotel_and_per_day_africa', r)\r\n\t\t\t\t\t\t\t;\r\n\t\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse if (frm.doc.travel_grade == 'Others') {\r\n\t\t\t\tfrappe.db.get_single_value('Travel Settings', 'hotel_and_per_day_o_africa')\r\n\t\t\t\t\t.then(r => {\r\n\t\t\t\t\t\tfrm.set_value('hotel_and_per_day_africa', r)\r\n\r\n\t\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t\tif (frm.doc.travel_grade == 'CEO') {\r\n\t\t\t\tif (frm.doc.qdb == 'Yes') {\r\n\t\t\t\t\tfrappe.db.get_single_value('Travel Settings', 'qdb_africa')\r\n\t\t\t\t\t\t.then(r => {\r\n\t\t\t\t\t\t\tfrm.set_value('hotel_and_per_day_africa', r)\r\n\t\t\t\t\t\t})\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (frm.doc.travel_grade == 'Managers') {\r\n\t\t\t\tif (frm.doc.qdb == 'Yes') {\r\n\t\t\t\t\tfrappe.db.get_single_value('Travel Settings', 'qdb_m_africa')\r\n\t\t\t\t\t\t.then(r => {\r\n\t\t\t\t\t\t\tfrm.set_value('hotel_and_per_day_africa', r)\r\n\t\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (frm.doc.travel_grade == 'Others') {\r\n\t\t\t\tif (frm.doc.qdb == 'Yes') {\r\n\t\t\t\t\tfrappe.db.get_single_value('Travel Settings', 'qdb_o_africa')\r\n\t\t\t\t\t\t.then(r => {\r\n\t\t\t\t\t\t\tfrm.set_value('hotel_and_per_day_africa', r)\r\n\t\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\tif (frm.doc.travel_region == 'Asia' && frm.doc.hotel_required != 'No') {\r\n\t\t\tif (frm.doc.travel_grade == 'CEO') {\r\n\t\t\t\tfrappe.db.get_single_value('Travel Settings', 'hotel_and_per_day_asia')\r\n\t\t\t\t\t.then(r => {\r\n\t\t\t\t\t\tfrm.set_value('hotel_and_per_day_africa', r)\r\n\t\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t\telse if (frm.doc.travel_grade == 'Managers') {\r\n\t\t\t\tfrappe.db.get_single_value('Travel Settings', 'hotel_and_per_day_m_asia')\r\n\t\t\t\t\t.then(r => {\r\n\t\t\t\t\t\tfrm.set_value('hotel_and_per_day_africa', r)\r\n\r\n\t\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t\telse if (frm.doc.travel_grade == 'Others') {\r\n\t\t\t\tfrappe.db.get_single_value('Travel Settings', 'hotel_and_per_day_o_asia')\r\n\t\t\t\t\t.then(r => {\r\n\t\t\t\t\t\tfrm.set_value('hotel_and_per_day_africa', r)\r\n\t\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t\tif (frm.doc.travel_grade == 'CEO') {\r\n\t\t\t\tif (frm.doc.qdb == 'Yes') {\r\n\t\t\t\t\tfrappe.db.get_single_value('Travel Settings', 'qdb_asia')\r\n\t\t\t\t\t\t.then(r => {\r\n\t\t\t\t\t\t\tfrm.set_value('hotel_and_per_day_africa', r)\r\n\t\t\t\t\t\t})\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (frm.doc.travel_grade == 'Managers') {\r\n\t\t\t\tif (frm.doc.qdb == 'Yes') {\r\n\t\t\t\t\tfrappe.db.get_single_value('Travel Settings', 'qdb_m_asia')\r\n\t\t\t\t\t\t.then(r => {\r\n\t\t\t\t\t\t\tfrm.set_value('hotel_and_per_day_africa', r)\r\n\t\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (frm.doc.travel_grade == 'Others') {\r\n\t\t\t\tif (frm.doc.qdb == 'Yes') {\r\n\t\t\t\t\tfrappe.db.get_single_value('Travel Settings', 'qdb_o_asia')\r\n\t\t\t\t\t\t.then(r => {\r\n\t\t\t\t\t\t\tfrm.set_value('hotel_and_per_day_africa', r)\r\n\t\t\t\t\t\t})\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (frm.doc.travel_region == 'Europe' && frm.doc.hotel_required != 'No') {\r\n\t\t\tif (frm.doc.travel_grade == 'CEO') {\r\n\t\t\t\tfrappe.db.get_single_value('Travel Settings', 'hotel_and_per_day_europe')\r\n\t\t\t\t\t.then(r => {\r\n\t\t\t\t\t\tfrm.set_value('hotel_and_per_day_africa', r)\r\n\r\n\t\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse if (frm.doc.travel_grade == 'Managers') {\r\n\t\t\t\tfrappe.db.get_single_value('Travel Settings', 'hotel_and_per_day_m_europe')\r\n\t\t\t\t\t.then(r => {\r\n\t\t\t\t\t\tfrm.set_value('hotel_and_per_day_africa', r)\r\n\r\n\t\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse if (frm.doc.travel_grade == 'Others') {\r\n\t\t\t\tfrappe.db.get_single_value('Travel Settings', 'hotel_and_per_day_o_europe')\r\n\t\t\t\t\t.then(r => {\r\n\t\t\t\t\t\tfrm.set_value('hotel_and_per_day_africa', r)\r\n\r\n\t\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t\tif (frm.doc.travel_grade == 'CEO') {\r\n\t\t\t\tif (frm.doc.qdb == 'Yes') {\r\n\t\t\t\t\tfrappe.db.get_single_value('Travel Settings', 'qdb_europe')\r\n\t\t\t\t\t\t.then(r => {\r\n\t\t\t\t\t\t\tfrm.set_value('hotel_and_per_day_africa', r)\r\n\t\t\t\t\t\t})\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (frm.doc.travel_grade == 'Managers') {\r\n\t\t\t\tif (frm.doc.qdb == 'Yes') {\r\n\t\t\t\t\tfrappe.db.get_single_value('Travel Settings', 'qdb_m_europe')\r\n\t\t\t\t\t\t.then(r => {\r\n\t\t\t\t\t\t\tfrm.set_value('hotel_and_per_day_africa', r)\r\n\t\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (frm.doc.travel_grade == 'Others') {\r\n\t\t\t\tif (frm.doc.qdb == 'Yes') {\r\n\t\t\t\t\tfrappe.db.get_single_value('Travel Settings', 'qdb_o_europe')\r\n\t\t\t\t\t\t.then(r => {\r\n\t\t\t\t\t\t\tfrm.set_value('hotel_and_per_day_africa', r)\r\n\t\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\r\n\t\t}\r\n\t},\r\n\tdestination(frm) {\r\n\t\t$.each(frm.doc.itinerary, function (i, d) {\r\n\t\t\tvar from_date = new Date(d.departure_date);\r\n\t\t\tvar to_date = new Date(d.arrival_date);\r\n\t\t\tvar diffTime = Math.abs(to_date - from_date);\r\n\t\t\tvar diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n\t\t\tfrm.set_value('no_days_travel', diffDays)\r\n\r\n\t\t})\r\n\t\t\t\r\n\t},\r\n\ttravel_grade(frm){\r\n\t    if(frm.doc.travel_grade == 'Managers' || frm.doc.travel_grade == 'Others' ){\r\n\t        frm.set_value('booked_air_class','ECONOMY CLASS')\r\n\t    }\r\n\t    else{\r\n\t        frm.set_value('booked_air_class','BUSINESS CLASS')\r\n\t    }\r\n\t},\r\n\tno_days_travel(frm) {\r\n\t\tif (frm.doc.no_days_travel) {\r\n\t\t\tvar travel_amount = frm.doc.hotel_and_per_day_africa\r\n\t\t\tvar calc_amt = travel_amount * frm.doc.no_days_travel\r\n\t\t\tfrm.set_value('amount', calc_amt)\r\n\t\t}\r\n\t}\r\n        \t\r\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Opportunity",
  "enabled": 1,
  "modified": "2022-10-20 10:30:56.463349",
  "module": null,
  "name": "Opportunity-Form",
  "script": "frappe.ui.form.on('Opportunity', {\n    onload(frm){\n        if (frm.doc.__islocal) {\n            frm.set_value('opportunity_owner',frappe.session.user);\n            \n            var current_date =  frappe.datetime.nowdate()\n        \tvar next_week=frappe.datetime.add_days(current_date,7);\n        \tfrm.set_value('expected_closing',next_week)\n        }\n    },\n\trefresh(frm) {\n\t\t// your code here\n\t},\n// \tvalidate(frm){\n// \t    if(frm.doc.with_items == 1){\n//     \t    frm.clear_table('items')\n//                 $.each(frm.doc.items_table, function (i, c) {\n//     \t            frm.add_child('items', {\n//     \t\t\t\t\t'item_code': c.item_code,\n//     \t\t\t\t\t'item_name': c.item_name,\n//     \t\t\t\t\t'uom':c.uom,\n//     \t\t\t\t\t'qty':c.qty\n//     \t\t\t\t})\n    \t                \n//     \t           frm.refresh_field('items')\n    \t           \n// \t\t    })\n// \t\t    frm.set_value(\"with_new_items\",0)\n// \t    }\n// \t},\n\tsetup: function(frm){\n\t    frm.set_query(\"item_group\", 'items',function (doc, cdt, cdn) {\n\t\t\tlet d = locals[cdt][cdn];\n\t\t\treturn {\n\t\t\t\tfilters: [\n\t\t\t\t\t['Item Group', 'parent_item_group', '=', 'Finish Goods']\n\t\t\t\t]\n\t\t\t};\n\t\t});\n\t\tfrm.set_query(\"sub_group\", 'items',function (doc, cdt, cdn) {\n\t\t\tlet d = locals[cdt][cdn];\n\t\t\treturn {\n\t\t\t\tfilters: [\n\t\t\t\t\t['Item Group', 'parent_item_group', '=', d.item_group]\n\t\t\t\t]\n\t\t\t};\n\t\t});\n\t\t\n\t}\n\t\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Expense Claim",
  "enabled": 1,
  "modified": "2022-09-21 08:26:02.867729",
  "module": null,
  "name": "Expense Claim-Form",
  "script": "frappe.ui.form.on('Expense Claim', {\n\tonload(frm) {\n\t    if(frm.doc.travel_request){\n\t    frappe.call({\n\t        method:'frappe.client.get',\n\t        args:{\n\t            name:frm.doc.travel_request,\n\t\t\t\tdoctype: \"Travel Request\",\n\t\t\t\t\n\t        },\n\t        callback:function(r){\n\t            var date = r.message.itinerary[0].departure_date\n\t            var expense_date = date.split(\" \")\n\t            var amount = r.message.amount\n\t            $.each(frm.doc.expenses,function(i,f){\n        \t        f.expense_date = expense_date\n        \t        f.expense_type = \"Travel\"\n        \t        f.amount = amount\n        \t    })\n\t            $.each(r.message.itinerary,function(i,f){\n\t                console.log(frappe.datetime)\n    \t            var ex = frm.add_child('Expenses');\n    \t            var dpt = f.departure_date\n    \t            var S = Date.parse(f.departure_date)\n    \t             console.log(typeof(S))\n    \t             console.log(\"HIII\", S)\n    \t            ex.expense_date = f.departure_date\n\t            })\n\t            \n\t        }\n\t        \n\t        \n\t    })\n\t    }\n\t   // $.each(frm.doc.travel_request,function(i,f){\n\t   //     console.log(f.employee)\n\t   // })\n\t    \n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Technical Costing",
  "enabled": 0,
  "modified": "2022-09-28 07:28:02.537460",
  "module": null,
  "name": "Technical Costing-Form",
  "script": "frappe.ui.form.on('Technical Costing', {\n\t    \n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Probation Evaluation Form",
  "enabled": 1,
  "modified": "2022-10-19 11:26:58.336992",
  "module": null,
  "name": "Probation Evaluation Form-Form",
  "script": "frappe.ui.form.on('Probation Evaluation Form', {\n// \trefresh(frm) {\n// \t    if(frm.doc.workflow_state == 'Submitted'){\n// \t    frm.add_custom_button(__('Print Confirmation Order'),function(){\n// \t        window.open(\n// \t            frappe.urllib.get_full_url(`/api/method/frappe.utils.print_format.download_pdf?\n// \t\t\t\t\tdoctype=${encodeURIComponent(\"Probation Assessment\")}\n// \t\t\t\t\t&name=${encodeURIComponent(frm.doc.name)}\n// \t\t\t\t\t&format=${encodeURIComponent('Confirmation Order')}`)\n// \t\t\t);\n// \t    })         \n// \t    }\n// \t},\n    refresh: function(frm) {\n\t\tif(frm.doc.__islocal){\n\t\t\tif(!frm.doc.evaluation){\n\t\t\tvar factors = [{'factors':'Job Knowledge'},{'factors':'Quality of Work'},{'factors':'Quanity of Work'},\n\t\t\t\t\t{'factors':'Co-Operation'},{'factors':'Attendance'},{'factors':'Personal Qualities'},\n\t\t\t\t\t{'factors':'Overall Assessment'},{'factors':'Recommendation'}]\n\t\t\t\t$.each(factors,function(i,v){\n\t\t\t\t\tfrm.add_child('evaluation',{\n\t\t\t\t\t\tfactors:v.factors\n\t\t\t\t\t})\n\t\t\t\tfrm.refresh_field('evaluation')\t\n\t\t\t\t})\n\t\t\t}\t\n\t\t}\t\t\n\t},\n\tvalidate(frm){\n\t    var total = 0\n        $.each(frm.doc.evaluation,function(i,d){\n            if(d.rating){\n            total += d.rating\n            }\n        })\n        frm.set_value('total_score',Math.round(total*100)/100)\n\t}\n})\n\t\n",
  "view": "Form"
 }
]